# Run this using pwsh on Linux
$MaxPasswordAge = 60
$TempPassword = '1CyberPatriot!'   # Avoid plaintext in production
$MinPasswordLength = 20

$HeaderColor = "Cyan"
$PromptColor = "Yellow"
$WarningColor = "Red"

# Platform detection
if ($IsWindows) {
    $Hostname = $env:COMPUTERNAME
} else {
    # On Linux/macOS
    $Hostname = (& hostname).Trim()
}

# Check for root on Unix-like systems
if (-not $IsWindows) {
    try {
        $uid = (& id -u).Trim()
    } catch {
        Write-Host "Cannot determine UID. Ensure 'id' is available." -ForegroundColor $WarningColor
        exit 1
    }
    if ($uid -ne '0') {
        Write-Host "Script is not running as root. Re-run with sudo: sudo pwsh ./yourscript.ps1" -ForegroundColor $WarningColor
        exit 1
    }
} else {
    # Windows elevation check
    $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
    if (-not $isAdmin) {
        Write-Host "Script is not running as administrator. Relaunching as admin..." -ForegroundColor $WarningColor
        Start-Process -FilePath "powershell.exe" -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
        exit
    }
}

Write-Host "Computer Name: $Hostname" -ForegroundColor $HeaderColor

# Get OS info (cross-platform approach)
if ($IsWindows) {
    Get-ComputerInfo | Select-Object -Property WindowsProductName, WindowsVersion, OsHardwareAbstractionLayer | Format-List
} else 
    # Linux: parse /etc/os-release if available
    if (Test-Path /etc/os-release) {
        $os = Get-Content /etc/os-release | ForEach-Object {
            if ($_ -match '^(?<k>[^=]+)=(?<v>.*)$') {
                [PSCustomObject]@{ Key = $matches.k; Value = ($matches.v.Trim('"')) }
            
        } | Group-Object -AsHashTable -AsString -Property Key
        Write-Host "OS: $($os['NAME'].Value) $($os['VERSION'].Value)" -ForegroundColor $HeaderColor
    } else {
        Write-Host "OS: $((uname) 2>$null)" -ForegroundColor $HeaderColor
    }
}

Write-Host "Script Run Time: $(Get-Date)" -ForegroundColor $HeaderColor

$menuOptions = @(
    "Document the system",
    "Enable updates",
    "User Auditing",
    "Account Policies",
    "Local Policies",
    "Defensive Countermeasures",
    "Uncategorized OS Settings",
    "Service Auditing",
    "OS Updates",
    "Application Updates",
    "Prohibited Files",
    "Unwanted Software",
    "Malware",
    "Application Security Settings",
    "Exit"
)

# Simple menu
for ($i=0; $i -lt $menuOptions.Count; $i++) {
    Write-Host ("{0,2}) {1}" -f ($i+1), $menuOptions[$i])
}
